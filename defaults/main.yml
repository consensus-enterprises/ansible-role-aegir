---
aegir_debug: false

# Possible values include "deb", "git".
# When requesting a deb install, aegir_deb_release and aegir_repo_key_id are required as shown here in the defaults.
# For git-based deployments, see below.
aegir_install_method: deb
aegir_deb_release: stable
aegir_repo_key_id: "5ADF93A03376CCF9"

aegir_generate_makefile: false
aegir_etc_path: /etc/aegir
aegir_makefile_template: aegir.make.yml.j2
aegir_makefile_path: "{{ aegir_etc_path }}/{{ aegir_makefile_template | splitext | first }}"

# Aegir modules
aegir_custom_module_repos: {}
# These will default to the value of `aegir_release`.
aegir_custom_module_versions: {}
aegir_contrib_modules: []
# These will default to '~', which will fetch the latest release.
aegir_contrib_module_versions: {}
aegir_release: "{{ _default_aegir_release }}"

# For git-based deployments, we can explicitely set a platform version that
# gets interpolated into the platform path, etc.
aegir_platform_version: 7.x-3.x
# However, with git-based deployments, the makefile may not get re-written,
# since most modules will usually be pointing at a branch. In that case, we
# have to force a new platform to be built. This will usually be triggered by
# passing in this var at the command-line.
# (eg. `ansible-playbook -e"aegir_force_upgrade=True"`).
aegir_force_upgrade: false
# When we want to force an update, there's likely to already be a platform
# using the default version variable above. So we can generate one using the
# timestamp of the makefile, to ensure that it's unique, but only gets built
# when the makefile changes.
# We can also explicitely set this to `True`, so that our hostmaster platforms
# always use this naming convention.
aegir_set_automatic_hostmaster_platform_version: "{{ aegir_force_upgrade }}"

aegir_root: /var/aegir
aegir_ssh_directory: "{{ aegir_root }}/.ssh"
aegir_provision_directory: "{{ aegir_root }}/.drush/provision"
aegir_user: aegir
aegir_web_group: www-data
aegir_upgrade_composer: false
aegir_install_additional_packages: true
# Empty list by default; can be overridden in roles that use this one to install additional Aegir packages:
aegir_additional_packages: []

# Acceptable values include "apache", "nginx".
aegir_http_service_type: apache

aegir_frontend_url: aegir.local
aegir_generate_keypair: true
# Whether to run the various fix-up scripts deployed with Aegir.
aegir_fix_ownership: false
aegir_fix_permissions: false
aegir_registry_rebuild: false

aegir_login_link: false
aegir_admin_email: 'this.email@is.invalid'

# Database
aegir_db_password: "{{ mysql_root_password_written | default(_default_aegir_db_password) }}"
aegir_db_user: "{{ mysql_root_username | default(_default_aegir_db_user) }}"
aegir_db_host: 'localhost'

# Hostmaster
aegir_hostmaster_repo: https://git.drupalcode.org/project/hostmaster.git
aegir_hostmaster_version: "{{ aegir_release }}"

# Provision
aegir_provision_repo: https://git.drupalcode.org/project/provision.git
aegir_provision_version: 7.x-3.x
aegir_provision_update: false

# Drush
aegir_install_drush: true
# Acceptable values: "phar", "git". When set to "git," see "Install Drush from source," below.
aegir_drush_install_method: phar
aegir_drush_version: 8.3.4
# Install Drush from source (git clone + composer-based install).
aegir_drush_source_repo: https://github.com/drush-ops/drush.git
aegir_drush_source_install_bin_path: /usr/local/bin/drush
aegir_drush_source_install_path: /usr/local/share/drush
aegir_drush_source_install_version: "8.3.4"
aegir_drush_source_update: false
aegir_drush_source_force_update: false
aegir_drush_source_clone_depth: 1

aegir_manage_dependencies: true
aegir_dependencies:
  - composer
  - cron
  - git
  - mysql-client
  - php-cli
  - php-curl
  - php-gd
  - php-mbstring
  - php-mysql
  - php-xml
  - postfix
  - rsync
  - sudo
  - unzip
aegir_dependencies_apache:
  - apache2
  - libapache2-mod-php
aegir_dependencies_nginx:
  - nginx
  - php-fpm
aegir_drush_dependencies:
  - curl
  - composer

aegir_extra_config: false
aegir_extra_modules:
  - hosting_subdirs

aegir_use_hosting_queued: true
# To use the Skynet queue daemon, enable it and disable hosting_queued."
aegir_skynet_enable: false
# Sensible defaults for Skynet.
aegir_skynet_bin_path: "{{ default_aegir_skynet_bin_path }}"
aegir_skynet_service_command: "{{ aegir_skynet_bin_path }} queued --config_file={{ aegir_root }}/config/skynet/skynet.conf"
aegir_skynet_dependencies:
  - build-essential
  - python3
  - python3-dev
  - python3-mysqldb
  - python3-pip
  - sudo

# Whether to run legacy cleanup scripts on servers where Aegir is being reinstalled.
aegir_perform_legacy_cleanup: false

# Configure HTTPS proxy settings for all Drupal sites, e.g.
#aegir_https_proxy_ip_range: "192.168.177.0/24"

# Ref.: https://gitlab.com/consensus.enterprises/ansible-roles/ansible-role-aegir/-/issues/3
aegir_stop_before_site_install: false
