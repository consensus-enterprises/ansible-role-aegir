#image: ubuntu:focal
image: ubuntu:noble

stages:
  - test

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  # Overcome world-writeable dir complaints. See:
  # https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir
  ANSIBLE_CONFIG: ansible.cfg
  DEBIAN_FRONTEND: noninteractive

# This is the key test scenario that currently works. It relies on a very
# tailored playbook which points to specific branches/commits of both Drush and
# Provision modules, in order to allow Aegir3 to function correctly in an
# Ubuntu 22.04/24.04 environment, running Drupal 7 through 10 sites (and
# supporting Drupal 11+ in a remote server architecture).
custom-deploy: &test-defaults
  variables:
    ANSIBLE_TEST_PLAYBOOK: tests/custom-deploy.yml
    extra_vars: aegir_skynet_enable=False
  stage: test
  before_script:
    # Install Git and GNU Make
    - apt-get update -yqq
    - apt-get install -yqq git make unzip python3-minimal python3-pip python3-yaml python3-jinja2 python3-apt python3-packaging python3-resolvelib
    - update-alternatives --install /usr/bin/python python /usr/bin/python3 1
    - pip3 install jinja2-cli matrix-client --break-system-packages
    - make ansible-all
    # Fetch collection dependencies
    - source d
    - ansible-galaxy collection install community.crypto community.general community.mysql
    - ansible-galaxy role install geerlingguy.php geerlingguy.nginx geerlingguy.mysql geerlingguy.composer geerlingguy.php-versions
    # Make our base URL resolve.
    - echo `hostname -I` aegir.local >> /etc/hosts

  script:
    - make ansible-role-test; make -s matrix-ci NOTIFY_CI_RESULT=$?

# These variants appear to be intended to test installation via Apt respository
# packages, which no longer exist.
#deb-nginx:
#  <<: *test-defaults
#  variables:
#    ANSIBLE_TEST_PLAYBOOK: tests/deb-nginx.yml
#deb-default:
#  <<: *test-defaults
#  variables:
#    ANSIBLE_TEST_PLAYBOOK: tests/deb-default.yml
#    extra_vars: aegir_skynet_enable=False

# These are all failing for reasons I don't care to investigate for now. The
# custom-deploy scenario I'm making default is the closest thing to what I'm
# actually doing for an Aegir3 deployment to support Drupal 7-10 sites.
#git-deploy:
#  <<: *test-defaults
#  variables:
#    ANSIBLE_TEST_PLAYBOOK: tests/git-deploy.yml
#
#custom-upgrade:
#  <<: *test-defaults
#  variables:
#    ANSIBLE_TEST_PLAYBOOK: tests/custom-deploy.yml
#    extra_vars: aegir_skynet_enable=False
#  script:
#    #- source d
#    - make ansible-role-test
#    - make ansible-role-test ANSIBLE_TEST_PLAYBOOK=tests/upgrade.yml; make -s matrix-ci NOTIFY_CI_RESULT=$?
#
#image-deploy:
#  <<: *test-defaults
#  variables:
#    ANSIBLE_TEST_PLAYBOOK: tests/image-deploy.yml
#
#unit-tests:
#  <<: *test-defaults
#  variables:
#    ANSIBLE_TEST_PLAYBOOK: tests/unit-tests.yml
#    extra_vars: aegir_skynet_enable=False
